
buildscript {
    ext {
        springBootVersion = '1.1.9.RELEASE'
    }
    repositories {
	    mavenLocal()
        mavenCentral()
	    jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	classpath("net.coacoas.gradle:gradle-ensime:0.1.8")
	classpath("org.springframework:springloaded:1.2.3.RELEASE")
	classpath("org.scoverage:gradle-scoverage:1.0.6")
  }
}


plugins {
  id "com.github.maiflai.scalatest" version "0.6-5-g9065d91"
}

apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'spring-boot'
apply plugin: 'ensime'
apply plugin: 'scoverage'

ext {
  scalaLibraryVersionMajor = '2.11'
  scalaLibraryVersion = '2.11.4'
}


war {
    baseName = 'federation-project-app'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    compile group: 'org.resthub', name: 'springmvc-router', version: '1.2.0'
    compile group: 'com.andersen-gott', name: 'scravatar_2.11', version: '1.0.3'
    compile group: 'log4j', name: 'log4j', version:'1.2.16'
    compile group: 'org.scala-lang', name: 'scala-compiler', version: scalaLibraryVersion

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")

    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE")

    compile("org.springframework:spring-tx")
    compile("org.springframework:spring-jdbc")

    compile("org.springframework.boot:spring-boot-starter-jetty")
    //providedRuntime("org.springframework.boot:spring-boot-starter-jetty")

    compile("org.xerial:sqlite-jdbc:3.8.7")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("info.cukes:cucumber-scala_2.11:1.2.0")
    testCompile("info.cukes:cucumber-junit:1.2.0")

    testCompile("org.scalatest:scalatest_${scalaLibraryVersionMajor}:2.2.1")
    testCompile("org.scalacheck:scalacheck_${scalaLibraryVersionMajor}:1.12.1")
    testCompile("org.mockito:mockito-core:1.+")
    testCompile("org.pegdown:pegdown:1.4.2")

    scoverage("org.scoverage:scalac-scoverage-plugin_${scalaLibraryVersionMajor}:1.0.2")
    scoverage("org.scoverage:scalac-scoverage-runtime_${scalaLibraryVersionMajor}:1.0.2")
}

tasks.withType(ScalaCompile) {
  // configure(scalaCompileOptions.forkOptions) {
  //   memoryMaximumSize = '1g'
  //   jvmArgs = ['-XX:MaxPermSize=512m']
  // }

  scalaCompileOptions.additionalParameters = [ "-feature", "-Xlint" ]
  scalaCompileOptions.useAnt = false
  scalaCompileOptions.optimize = false
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

jettyRun {
	reload = "manual"
}

stopPort = 9091
httpPort = 9090

